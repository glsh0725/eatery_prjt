<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fs.four.eatery.restaurant.dao.RestaurantDAO">

    <!-- 식당 존재 여부 확인 -->
    <select id="isRestaurantExist" parameterType="String" resultType="boolean">
        SELECT COUNT(1) > 0
        FROM RESTAURANT
        WHERE RES_NAME = #{name}
    </select>

    <!-- 식당 데이터 삽입 -->
    <insert id="insertRestaurantData" parameterType="fs.four.eatery.restaurant.vo.RestaurantVO">
        INSERT INTO RESTAURANT (
            RES_NAME, RES_ADDRESS, RES_OLD_ADDRESS, RES_CATEGORY, RES_PHONE_NUMBER, RES_HOMEPAGE,
            RES_OPEN_TIME, RES_BREAK_TIME, RES_OFF_DAYS, RES_TAGS, RES_PARKING_INFO,
            RES_PHOTO_NAME, RES_MENU_NAME, RES_SCORE_NUMBER, RES_LIKE_COUNT, RES_VIEW_COUNT, RES_REVIEW_COUNT
        ) VALUES (
                     #{name}, #{address}, #{oldAddress}, #{category}, #{phoneNumber}, #{homepage},
                     #{openTime}, #{breakTime}, #{offDays}, #{tags}, #{parkingInfo},
                     #{photoName}, #{menuName}, #{scoreNumber}, 0, 0, 0
                 )
    </insert>

    <!-- 기본 RestaurantVO 매핑 -->
    <resultMap id="restaurantResultMap" type="fs.four.eatery.restaurant.vo.RestaurantVO">
        <result property="name" column="RES_NAME"/>
        <result property="address" column="RES_ADDRESS"/>
        <result property="oldAddress" column="RES_OLD_ADDRESS"/>
        <result property="category" column="RES_CATEGORY"/>
        <result property="phoneNumber" column="RES_PHONE_NUMBER"/>
        <result property="homepage" column="RES_HOMEPAGE"/>
        <result property="openTime" column="RES_OPEN_TIME"/>
        <result property="breakTime" column="RES_BREAK_TIME"/>
        <result property="offDays" column="RES_OFF_DAYS"/>
        <result property="tags" column="RES_TAGS"/>
        <result property="parkingInfo" column="RES_PARKING_INFO"/>
        <result property="photoName" column="RES_PHOTO_NAME"/>
        <result property="menuName" column="RES_MENU_NAME"/>
        <result property="scoreNumber" column="RES_SCORE_NUMBER"/>
        <result property="likeCount" column="RES_LIKE_COUNT"/>
        <result property="viewCount" column="RES_VIEW_COUNT"/>
        <result property="reviewCount" column="RES_REVIEW_COUNT"/>
    </resultMap>

    <!-- 모든 식당 조회 -->
    <select id="getAllRestaurants" resultMap="restaurantResultMap">
        SELECT *
        FROM RESTAURANT
    </select>

    <!-- 특정 식당 조회 -->
    <select id="findRestaurantByName" parameterType="String" resultMap="restaurantResultMap">
        SELECT *
        FROM RESTAURANT
        WHERE RES_NAME = #{name}
    </select>

    <!-- 리뷰 VO 매핑 -->
    <resultMap id="reviewResultMap" type="fs.four.eatery.restaurant.vo.ReviewVO">
        <result property="reviewNumber" column="REV_NUMBER"/>
        <result property="restaurantName" column="RES_NAME"/>
        <result property="memberId" column="MEM_ID"/>
        <result property="reviewScore" column="REV_SCORE_NUMBER"/>
        <result property="reviewContent" column="REV_CONTENT"/>
        <result property="reviewPhotoName" column="REV_PHOTO_NAME"/>
        <result property="reviewLikes" column="REV_LIKE_COUNT"/>
    </resultMap>

    <!-- 특정 식당의 리뷰 목록 조회 -->
    <select id="findReviewsByRestaurantName" parameterType="String" resultMap="reviewResultMap">
        SELECT *
        FROM REVIEW
        WHERE RES_NAME = #{restaurantName}
        ORDER BY REV_NUMBER DESC
    </select>

    <!-- 리뷰 삽입 -->
    <insert id="insertReview" parameterType="fs.four.eatery.restaurant.vo.ReviewVO">
        INSERT INTO REVIEW (
            REV_NUMBER, RES_NAME, MEM_ID, REV_SCORE_NUMBER, REV_CONTENT, REV_PHOTO_NAME, REV_LIKE_COUNT
        ) VALUES (
                     #{reviewNumber}, #{restaurantName}, #{memberId}, #{reviewScore}, #{reviewContent}, #{reviewPhotoName}, #{reviewLikes}
                 )
    </insert>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReviewById" parameterType="int">
        DELETE FROM REVIEW
        WHERE REV_NUMBER = #{reviewNumber}
    </delete>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="fs.four.eatery.restaurant.vo.ReviewVO">
        UPDATE REVIEW
        SET REV_SCORE_NUMBER = #{reviewScore},
            REV_CONTENT = #{reviewContent},
            REV_PHOTO_NAME = #{reviewPhotoName},
            REV_LIKE_COUNT = #{reviewLikes}
        WHERE REV_NUMBER = #{reviewNumber}
    </update>

    <!-- 식당과 리뷰를 함께 조회 -->
    <resultMap id="restaurantWithReviewsResultMap" type="fs.four.eatery.restaurant.vo.RestaurantVO">
        <result property="name" column="RES_NAME"/>
        <result property="address" column="RES_ADDRESS"/>
        <result property="oldAddress" column="RES_OLD_ADDRESS"/>
        <result property="category" column="RES_CATEGORY"/>
        <result property="phoneNumber" column="RES_PHONE_NUMBER"/>
        <result property="homepage" column="RES_HOMEPAGE"/>
        <result property="openTime" column="RES_OPEN_TIME"/>
        <result property="breakTime" column="RES_BREAK_TIME"/>
        <result property="offDays" column="RES_OFF_DAYS"/>
        <result property="tags" column="RES_TAGS"/>
        <result property="parkingInfo" column="RES_PARKING_INFO"/>
        <result property="photoName" column="RES_PHOTO_NAME"/>
        <result property="menuName" column="RES_MENU_NAME"/>
        <result property="scoreNumber" column="RES_SCORE_NUMBER"/>
        <result property="likeCount" column="RES_LIKE_COUNT"/>
        <result property="viewCount" column="RES_VIEW_COUNT"/>
        <result property="reviewCount" column="RES_REVIEW_COUNT"/>

        <!-- 리뷰 매핑 -->
        <collection property="reviews" ofType="fs.four.eatery.restaurant.vo.ReviewVO">
            <result property="reviewNumber" column="REV_NUMBER"/>
            <result property="restaurantName" column="RES_NAME"/>
            <result property="memberId" column="MEM_ID"/>
            <result property="reviewScore" column="REV_SCORE_NUMBER"/>
            <result property="reviewContent" column="REV_CONTENT"/>
            <result property="reviewPhotoName" column="REV_PHOTO_NAME"/>
            <result property="reviewLikes" column="REV_LIKE_COUNT"/>
        </collection>
    </resultMap>

    <select id="getAllRestaurantsWithReviews" resultMap="restaurantWithReviewsResultMap">
        SELECT *
        FROM
            RESTAURANT r
                LEFT JOIN
            REVIEW rv
            ON
                r.RES_NAME = rv.RES_NAME
        ORDER BY
            r.RES_SCORE_NUMBER DESC, rv.REV_NUMBER ASC
    </select>

    <!-- 좋아요와 즐겨찾기 조회 -->
    <select id="getLikesAndFavoritesByMember" parameterType="String" resultType="map">
        SELECT
            MEM_ID AS memId,
            COALESCE(TO_CHAR(LIKES_RES_NAME), '') AS likes,
            COALESCE(TO_CHAR(FAVORITES_RES_NAME), '') AS favorites
        FROM resToUpdate
        WHERE MEM_ID = #{memId}
    </select>

    <!-- 좋아요와 즐겨찾기 업데이트 -->
    <update id="updateLikesAndFavorites" parameterType="map">
        UPDATE resToUpdate
        SET
            LIKES_RES_NAME = #{likes, jdbcType=CLOB},
            FAVORITES_RES_NAME = #{favorites, jdbcType=CLOB}
        WHERE MEM_ID = #{memId}
    </update>

    <!-- 좋아요/즐겨찾기 초기화 -->
    <insert id="initializeResToUpdate">
        INSERT INTO RES_TO_UPDATE (MEM_ID, LIKES_RES_NAME, FAVORITES_RES_NAME)
        VALUES (#{memId}, EMPTY_CLOB(), EMPTY_CLOB())
    </insert>

</mapper>