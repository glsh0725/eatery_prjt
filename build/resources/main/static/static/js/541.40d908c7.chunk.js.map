{"version":3,"file":"static/js/541.40d908c7.chunk.js","mappings":"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","sources":["pages/Find_store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport regions from \"../data/regions.json\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport \"../css/Find_store.css\";\r\n\r\nconst Find_store = () => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [error, setError] = useState(\"\");\r\n    const [selectedTag, setSelectedTag] = useState(\"전체\");\r\n    const [selectedTime, setSelectedTime] = useState(\"전체\");\r\n    const [selectedRegion, setSelectedRegion] = useState(\"전체\");\r\n    const [isRegionModalOpen, setIsRegionModalOpen] = useState(false);\r\n    const [selectedProvince, setSelectedProvince] = useState(null);\r\n    const [selectedCity, setSelectedCity] = useState(null);\r\n    const [selectedArea, setSelectedArea] = useState(null);\r\n    const [isSelectCompleteActive, setIsSelectCompleteActive] = useState(false);\r\n    const [itemsPerPage, setItemsPerPage] = useState(8);\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const searchQuery = searchParams.get(\"search\") || \"\";\r\n\r\n    const tags = [\r\n        \"전체\", \"가족모임\", \"데이트\", \"상견례\", \"회식\", \"카페\", \"친목모임\",\r\n        \"코스요리\", \"점심식사\", \"혼밥\", \"안심식당\", \"노포\"\r\n    ];\r\n\r\n    const times = [\"전체\", ...Array.from({ length: 24 }, (_, i) => `${i + 1}시`)];\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:18080/api/restaurants-with-reviews\")\r\n            .then((response) => {\r\n                setRestaurants(response.data);\r\n            })\r\n            .catch((error) => {\r\n                setError(error.message);\r\n                console.error(\"Error fetching restaurants:\", error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setItemsPerPage(window.innerWidth <= 870 ? 4 : 8);\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n\r\n    const handleTagClick = (tag) => {\r\n        setSelectedTag(tag);\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const handlePageChange = (direction) => {\r\n        if (direction === \"next\" && currentPage < Math.ceil(filteredRestaurants.length / itemsPerPage)) {\r\n            setCurrentPage(currentPage + 1);\r\n        } else if (direction === \"prev\" && currentPage > 1) {\r\n            setCurrentPage(currentPage - 1);\r\n        }\r\n    };\r\n\r\n    const handleCardClick = (restaurantName) => {\r\n        navigate(`/find_store/${restaurantName}`);\r\n    };\r\n\r\n    const handleTimeChange = (event) => {\r\n        setSelectedTime(event.target.value);\r\n    };\r\n\r\n    const handleRegionSelection = (selection) => {\r\n        setSelectedRegion(selection);\r\n        setIsSelectCompleteActive(true);\r\n    };\r\n\r\n    const handleRegionComplete = () => {\r\n        if (!isSelectCompleteActive) return;\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setSelectedRegion(\"전체\");\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const isTimeWithinRange = (openTime, selectedTime) => {\r\n        if (!openTime || openTime === \"영업시간 정보 없음\" || selectedTime === \"전체\") {\r\n            return true;\r\n        }\r\n\r\n        if (!openTime.includes(\"~\")) {\r\n            return false;\r\n        }\r\n\r\n        const [start, end] = openTime.split(\" ~ \").map((time) => time.trim());\r\n        const selectedHour = parseInt(selectedTime.replace(\"시\", \"\"), 10);\r\n\r\n        if (!start || !end || isNaN(selectedHour)) {\r\n            return false;\r\n        }\r\n\r\n        const [startHour] = start.split(\":\").map(Number);\r\n        const [endHour] = end.split(\":\").map(Number);\r\n\r\n        if (startHour <= endHour) {\r\n            return selectedHour >= startHour && selectedHour <= endHour;\r\n        } else {\r\n            return selectedHour >= startHour || selectedHour <= endHour;\r\n        }\r\n    };\r\n\r\n    const filteredRestaurants = restaurants.filter((restaurant) => {\r\n        const matchesTag = selectedTag === \"전체\" || restaurant.tags?.includes(selectedTag);\r\n        const matchesTime = isTimeWithinRange(restaurant.openTime, selectedTime);\r\n        const matchesRegion =\r\n            selectedRegion === \"전체\" ||\r\n            (restaurant.address && restaurant.address.includes(selectedRegion));\r\n\r\n        const matchesSearch =\r\n            searchQuery === \"\" ||\r\n            restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            (restaurant.address && restaurant.address.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n            (restaurant.tags && restaurant.tags.toLowerCase().includes(searchQuery.toLowerCase()));\r\n\r\n        return matchesTag && matchesTime && matchesRegion && matchesSearch;\r\n    });\r\n\r\n    const sortedRestaurants = filteredRestaurants.sort((a, b) => {\r\n        const aAverageScore =\r\n            a.reviews?.length > 0\r\n                ? a.reviews.reduce((sum, review) => sum + review.reviewScore, 0) / a.reviews.length\r\n                : parseFloat(a.scoreNumber || 0);\r\n\r\n        const bAverageScore =\r\n            b.reviews?.length > 0\r\n                ? b.reviews.reduce((sum, review) => sum + review.reviewScore, 0) / b.reviews.length\r\n                : parseFloat(b.scoreNumber || 0);\r\n\r\n        return bAverageScore - aAverageScore;\r\n    });\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = sortedRestaurants.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <div className=\"find-store-container\">\r\n                <div className=\"header\">\r\n                    <span>\r\n                        방문시간 선택{\" \"}\r\n                        <select className=\"time-select\" value={selectedTime} onChange={handleTimeChange}>\r\n                            {times.map((time, index) => (\r\n                                <option key={index} value={time}>\r\n                                    {time}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        {\"　　　\"}\r\n                    </span>\r\n                    <span>\r\n                        현재 보고 있는 지역은{\" \"}\r\n                        <button className=\"region-select\" onClick={() => setIsRegionModalOpen(true)}>\r\n                            {selectedRegion === \"전체\" ? \"지역 선택\" : selectedRegion}\r\n                        </button>{\" \"}\r\n                        입니다.{\"　　\"}\r\n                    </span>\r\n                </div>\r\n                <div className=\"tag-container\">\r\n                    {tags.map((tag, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={`tag-button ${selectedTag === tag ? \"active\" : \"\"}`}\r\n                            onClick={() => handleTagClick(tag)}\r\n                        >\r\n                            {tag}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"left-arrow\"\r\n                    onClick={() => handlePageChange(\"prev\")}\r\n                    style={{ visibility: currentPage === 1 ? \"hidden\" : \"visible\" }}\r\n                >\r\n                    ◀\r\n                </div>\r\n                <div className=\"restaurant-list\">\r\n                    {error && <p className=\"error-message\">오류: {error}</p>}\r\n                    {currentItems.map((restaurant, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"restaurant-card\"\r\n                            onClick={() => handleCardClick(restaurant.name)}\r\n                        >\r\n                            <img\r\n                                src={restaurant.photoName === 'default.jpg'\r\n                                    ? '/images/default.jpg'\r\n                                    : `/images/restaurant/${restaurant.photoName}`}\r\n                                alt={restaurant.name}\r\n                            />\r\n                            <h2>{restaurant.name}</h2>\r\n                            <p>대표메뉴: {restaurant.category || \"정보 없음\"}</p>\r\n                            <h3>\r\n                                ⭐\r\n                                {restaurant.reviews?.length > 0 &&\r\n                                restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) > 0\r\n                                    ? (\r\n                                        restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) /\r\n                                        restaurant.reviews.length\r\n                                    ).toFixed(1)\r\n                                    : restaurant.scoreNumber}\r\n                            </h3>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"right-arrow\"\r\n                    onClick={() => handlePageChange(\"next\")}\r\n                    style={{\r\n                        visibility: currentPage === Math.ceil(filteredRestaurants.length / itemsPerPage) ? \"hidden\" : \"visible\",\r\n                    }}\r\n                >\r\n                    ▶\r\n                </div>\r\n\r\n                {isRegionModalOpen && (\r\n                    <div className=\"region-modal\">\r\n                        <div className=\"region-modal-content\">\r\n                            <button className=\"close-modal\" onClick={closeModal}>\r\n                                X\r\n                            </button>\r\n                            <h2 className=\"modal-title\">지역 선택</h2>\r\n                            <div className=\"region-title\">\r\n                                <span>광역시도</span>\r\n                                <span>시군구</span>\r\n                                <span>읍면동</span>\r\n                            </div>\r\n                            <div className=\"region-selection\">\r\n                                <div className=\"region-column\">\r\n                                    {Object.keys(regions).map((province) => (\r\n                                        <button\r\n                                            key={province}\r\n                                            className={`region-button ${selectedProvince === province ? \"active\" : \"\"}`}\r\n                                            onClick={() => {\r\n                                                setSelectedProvince(province);\r\n                                                setSelectedCity(null);\r\n                                                setSelectedArea(null);\r\n                                                handleRegionSelection(province);\r\n                                            }}\r\n                                        >\r\n                                            {province}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedProvince &&\r\n                                        Object.keys(regions[selectedProvince]).map((city) => (\r\n                                            <button\r\n                                                key={city}\r\n                                                className={`region-button ${selectedCity === city ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedCity(city);\r\n                                                    setSelectedArea(null);\r\n                                                    handleRegionSelection(`${selectedProvince} ${city}`);\r\n                                                }}\r\n                                            >\r\n                                                {city}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedCity &&\r\n                                        regions[selectedProvince][selectedCity].map((area) => (\r\n                                            <button\r\n                                                key={area}\r\n                                                className={`region-button ${selectedArea === area ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedArea(area);\r\n                                                    handleRegionSelection(`${selectedProvince} ${selectedCity} ${area}`);\r\n                                                }}\r\n                                            >\r\n                                                {area}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                            </div>\r\n                            <button\r\n                                className={`select-complete ${isSelectCompleteActive ? \"active\" : \"\"}`}\r\n                                onClick={handleRegionComplete}\r\n                                disabled={!isSelectCompleteActive}\r\n                            >\r\n                                선택 완료\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Find_store;"],"names":["Find_store","restaurants","setRestaurants","useState","currentPage","setCurrentPage","error","setError","selectedTag","setSelectedTag","selectedTime","setSelectedTime","selectedRegion","setSelectedRegion","isRegionModalOpen","setIsRegionModalOpen","selectedProvince","setSelectedProvince","selectedCity","setSelectedCity","selectedArea","setSelectedArea","isSelectCompleteActive","setIsSelectCompleteActive","itemsPerPage","setItemsPerPage","navigate","useNavigate","location","useLocation","searchQuery","URLSearchParams","search","get","times","Array","from","length","_","i","concat","useEffect","axios","then","response","data","catch","message","console","handleResize","window","innerWidth","addEventListener","removeEventListener","handlePageChange","direction","Math","ceil","filteredRestaurants","handleRegionSelection","selection","filter","restaurant","_restaurant$tags","matchesTag","tags","includes","matchesTime","isTimeWithinRange","openTime","start","end","split","map","time","trim","selectedHour","parseInt","replace","isNaN","startHour","Number","endHour","matchesRegion","address","matchesSearch","name","toLowerCase","sortedRestaurants","sort","a","b","_a$reviews","_b$reviews","aAverageScore","reviews","reduce","sum","review","reviewScore","parseFloat","scoreNumber","indexOfLastItem","indexOfFirstItem","currentItems","slice","_jsx","DiningLayout","children","_jsxs","className","value","onChange","event","target","index","onClick","tag","handleTagClick","style","visibility","_restaurant$reviews","handleCardClick","restaurantName","src","photoName","alt","category","toFixed","closeModal","Object","keys","regions","province","city","area","handleRegionComplete","disabled"],"sourceRoot":""}