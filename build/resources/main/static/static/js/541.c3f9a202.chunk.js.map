{"version":3,"file":"static/js/541.c3f9a202.chunk.js","mappings":"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","sources":["pages/Find_store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport regions from \"../data/regions.json\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport \"../css/Find_store.css\";\r\n\r\nconst Find_store = () => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [error, setError] = useState(\"\");\r\n    const [selectedTag, setSelectedTag] = useState(\"전체\");\r\n    const [selectedTime, setSelectedTime] = useState(\"전체\");\r\n    const [selectedRegion, setSelectedRegion] = useState(\"전체\");\r\n    const [isRegionModalOpen, setIsRegionModalOpen] = useState(false);\r\n    const [selectedProvince, setSelectedProvince] = useState(null);\r\n    const [selectedCity, setSelectedCity] = useState(null);\r\n    const [selectedArea, setSelectedArea] = useState(null);\r\n    const [isSelectCompleteActive, setIsSelectCompleteActive] = useState(false);\r\n    const [itemsPerPage, setItemsPerPage] = useState(8);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tags = [\r\n        \"전체\", \"가족모임\", \"데이트\", \"상견례\", \"회식\", \"카페\", \"친목모임\",\r\n        \"코스요리\", \"점심식사\", \"혼밥\", \"안심식당\", \"노포\"\r\n    ];\r\n\r\n    const times = [\"전체\", ...Array.from({ length: 24 }, (_, i) => `${i + 1}시`)];\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const restaurantResponse = await axios.get(\"http://localhost:18080/api/restaurants\");\r\n                const restaurantsData = restaurantResponse.data;\r\n\r\n                const restaurantsWithReviews = await Promise.all(\r\n                    restaurantsData.map(async (restaurant) => {\r\n                        try {\r\n                            const reviewsResponse = await axios.get(`http://localhost:18080/api/reviews/${restaurant.name}`);\r\n                            return {\r\n                                ...restaurant,\r\n                                reviews: reviewsResponse.data,\r\n                            };\r\n                        } catch (err) {\r\n                            console.error(`Failed to fetch reviews for ${restaurant.name}:`, err);\r\n                            return { ...restaurant, reviews: [] };\r\n                        }\r\n                    })\r\n                );\r\n\r\n                setRestaurants(restaurantsWithReviews);\r\n            } catch (error) {\r\n                setError(error.message);\r\n                console.error(\"Error fetching restaurants:\", error);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setItemsPerPage(window.innerWidth <= 870 ? 4 : 8);\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n\r\n    const handleTagClick = (tag) => {\r\n        setSelectedTag(tag);\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const handlePageChange = (direction) => {\r\n        if (direction === \"next\" && currentPage < Math.ceil(filteredRestaurants.length / itemsPerPage)) {\r\n            setCurrentPage(currentPage + 1);\r\n        } else if (direction === \"prev\" && currentPage > 1) {\r\n            setCurrentPage(currentPage - 1);\r\n        }\r\n    };\r\n\r\n    const handleCardClick = (restaurantName) => {\r\n        navigate(`/find_store/${restaurantName}`);\r\n    };\r\n\r\n    const handleTimeChange = (event) => {\r\n        setSelectedTime(event.target.value);\r\n    };\r\n\r\n    const handleRegionSelection = (selection) => {\r\n        setSelectedRegion(selection);\r\n        setIsSelectCompleteActive(true);\r\n    };\r\n\r\n    const handleRegionComplete = () => {\r\n        if (!isSelectCompleteActive) return;\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setSelectedRegion(\"전체\");\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const isTimeWithinRange = (openTime, selectedTime) => {\r\n        if (!openTime || openTime === \"영업시간 정보 없음\" || selectedTime === \"전체\") {\r\n            return true;\r\n        }\r\n\r\n        if (!openTime.includes(\"~\")) {\r\n            return false;\r\n        }\r\n\r\n        const [start, end] = openTime.split(\" ~ \").map((time) => time.trim());\r\n        const selectedHour = parseInt(selectedTime.replace(\"시\", \"\"), 10);\r\n\r\n        if (!start || !end || isNaN(selectedHour)) {\r\n            return false;\r\n        }\r\n\r\n        const [startHour] = start.split(\":\").map(Number);\r\n        const [endHour] = end.split(\":\").map(Number);\r\n\r\n        if (startHour <= endHour) {\r\n            return selectedHour >= startHour && selectedHour <= endHour;\r\n        } else {\r\n            return selectedHour >= startHour || selectedHour <= endHour;\r\n        }\r\n    };\r\n\r\n    const filteredRestaurants = restaurants.filter((restaurant) => {\r\n        const matchesTag = selectedTag === \"전체\" || restaurant.tags?.includes(selectedTag);\r\n        const matchesTime = isTimeWithinRange(restaurant.openTime, selectedTime);\r\n\r\n        const matchesRegion =\r\n            selectedRegion === \"전체\" ||\r\n            (restaurant.address && restaurant.address.includes(selectedRegion)) ||\r\n            (restaurant.address && selectedRegion.split(\" \").slice(0, -1).every((word) => restaurant.address.includes(word)) &&\r\n                restaurant.oldAddress?.includes(selectedRegion.split(\" \").pop()));\r\n\r\n        return matchesTag && matchesTime && matchesRegion;\r\n    });\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = filteredRestaurants.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <div className=\"find-store-container\">\r\n                <div className=\"header\">\r\n                    <span>\r\n                        방문시간 선택{\" \"}\r\n                        <select className=\"time-select\" value={selectedTime} onChange={handleTimeChange}>\r\n                            {times.map((time, index) => (\r\n                                <option key={index} value={time}>\r\n                                    {time}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        {\"　　　\"}\r\n                    </span>\r\n                    <span>\r\n                        현재 보고 있는 지역은{\" \"}\r\n                        <button className=\"region-select\" onClick={() => setIsRegionModalOpen(true)}>\r\n                            {selectedRegion === \"전체\" ? \"지역 선택\" : selectedRegion}\r\n                        </button>{\" \"}\r\n                        입니다.{\"　　\"}\r\n                    </span>\r\n                </div>\r\n                <div className=\"tag-container\">\r\n                    {tags.map((tag, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={`tag-button ${selectedTag === tag ? \"active\" : \"\"}`}\r\n                            onClick={() => handleTagClick(tag)}\r\n                        >\r\n                            {tag}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"left-arrow\"\r\n                    onClick={() => handlePageChange(\"prev\")}\r\n                    style={{ visibility: currentPage === 1 ? \"hidden\" : \"visible\" }}\r\n                >\r\n                    ◀\r\n                </div>\r\n                <div className=\"restaurant-list\">\r\n                    {error && <p className=\"error-message\">오류: {error}</p>}\r\n                    {currentItems.map((restaurant, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"restaurant-card\"\r\n                            onClick={() => handleCardClick(restaurant.name)}\r\n                        >\r\n                            <img\r\n                                src={restaurant.photoName === 'default.jpg'\r\n                                    ? '/images/default.jpg'\r\n                                    : `/images/restaurant/${restaurant.photoName}`}\r\n                                alt={restaurant.name}\r\n                            />\r\n                            <h2>{restaurant.name}</h2>\r\n                            <p>대표메뉴: {restaurant.category || \"정보 없음\"}</p>\r\n                            <h3>\r\n                                ⭐\r\n                                {restaurant.reviews?.length > 0 &&\r\n                                restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) > 0\r\n                                    ? (\r\n                                        restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) /\r\n                                        restaurant.reviews.length\r\n                                    ).toFixed(1)\r\n                                    : restaurant.scoreNumber}\r\n                            </h3>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"right-arrow\"\r\n                    onClick={() => handlePageChange(\"next\")}\r\n                    style={{\r\n                        visibility: currentPage === Math.ceil(filteredRestaurants.length / itemsPerPage) ? \"hidden\" : \"visible\",\r\n                    }}\r\n                >\r\n                    ▶\r\n                </div>\r\n\r\n                {isRegionModalOpen && (\r\n                    <div className=\"region-modal\">\r\n                        <div className=\"region-modal-content\">\r\n                            <button className=\"close-modal\" onClick={closeModal}>\r\n                                X\r\n                            </button>\r\n                            <h2 className=\"modal-title\">지역 선택</h2>\r\n                            <div className=\"region-title\">\r\n                                <span>광역시도</span>\r\n                                <span>시군구</span>\r\n                                <span>읍면동</span>\r\n                            </div>\r\n                            <div className=\"region-selection\">\r\n                                <div className=\"region-column\">\r\n                                    {Object.keys(regions).map((province) => (\r\n                                        <button\r\n                                            key={province}\r\n                                            className={`region-button ${selectedProvince === province ? \"active\" : \"\"}`}\r\n                                            onClick={() => {\r\n                                                setSelectedProvince(province);\r\n                                                setSelectedCity(null);\r\n                                                setSelectedArea(null);\r\n                                                handleRegionSelection(province);\r\n                                            }}\r\n                                        >\r\n                                            {province}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedProvince &&\r\n                                        Object.keys(regions[selectedProvince]).map((city) => (\r\n                                            <button\r\n                                                key={city}\r\n                                                className={`region-button ${selectedCity === city ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedCity(city);\r\n                                                    setSelectedArea(null);\r\n                                                    handleRegionSelection(`${selectedProvince} ${city}`);\r\n                                                }}\r\n                                            >\r\n                                                {city}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedCity &&\r\n                                        regions[selectedProvince][selectedCity].map((area) => (\r\n                                            <button\r\n                                                key={area}\r\n                                                className={`region-button ${selectedArea === area ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedArea(area);\r\n                                                    handleRegionSelection(`${selectedProvince} ${selectedCity} ${area}`);\r\n                                                }}\r\n                                            >\r\n                                                {area}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                            </div>\r\n                            <button\r\n                                className={`select-complete ${isSelectCompleteActive ? \"active\" : \"\"}`}\r\n                                onClick={handleRegionComplete}\r\n                                disabled={!isSelectCompleteActive}\r\n                            >\r\n                                선택 완료\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Find_store;"],"names":["Find_store","restaurants","setRestaurants","useState","currentPage","setCurrentPage","error","setError","selectedTag","setSelectedTag","selectedTime","setSelectedTime","selectedRegion","setSelectedRegion","isRegionModalOpen","setIsRegionModalOpen","selectedProvince","setSelectedProvince","selectedCity","setSelectedCity","selectedArea","setSelectedArea","isSelectCompleteActive","setIsSelectCompleteActive","itemsPerPage","setItemsPerPage","navigate","useNavigate","times","Array","from","length","_","i","concat","useEffect","async","restaurantsData","axios","get","data","restaurantsWithReviews","Promise","all","map","reviewsResponse","restaurant","name","_objectSpread","reviews","err","console","message","fetchRestaurants","handleResize","window","innerWidth","addEventListener","removeEventListener","handlePageChange","direction","Math","ceil","filteredRestaurants","handleRegionSelection","selection","filter","_restaurant$tags","_restaurant$oldAddres","matchesTag","tags","includes","matchesTime","isTimeWithinRange","openTime","start","end","split","time","trim","selectedHour","parseInt","replace","isNaN","startHour","Number","endHour","matchesRegion","address","slice","every","word","oldAddress","pop","indexOfLastItem","indexOfFirstItem","currentItems","_jsx","DiningLayout","children","_jsxs","className","value","onChange","event","target","index","onClick","tag","handleTagClick","style","visibility","_restaurant$reviews","handleCardClick","restaurantName","src","photoName","alt","category","reduce","sum","review","reviewScore","toFixed","scoreNumber","closeModal","Object","keys","regions","province","city","area","handleRegionComplete","disabled"],"sourceRoot":""}