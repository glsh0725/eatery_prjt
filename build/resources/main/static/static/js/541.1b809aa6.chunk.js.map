{"version":3,"file":"static/js/541.1b809aa6.chunk.js","mappings":"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","sources":["pages/Find_store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport regions from \"../data/regions.json\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport \"../css/Find_store.css\";\r\n\r\nconst Find_store = () => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [error, setError] = useState(\"\");\r\n    const [selectedTag, setSelectedTag] = useState(\"전체\");\r\n    const [selectedTime, setSelectedTime] = useState(\"전체\");\r\n    const [selectedRegion, setSelectedRegion] = useState(\"전체\");\r\n    const [isRegionModalOpen, setIsRegionModalOpen] = useState(false);\r\n    const [selectedProvince, setSelectedProvince] = useState(null);\r\n    const [selectedCity, setSelectedCity] = useState(null);\r\n    const [selectedArea, setSelectedArea] = useState(null);\r\n    const [isSelectCompleteActive, setIsSelectCompleteActive] = useState(false);\r\n    const [itemsPerPage, setItemsPerPage] = useState(8);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tags = [\r\n        \"전체\", \"가족모임\", \"데이트\", \"상견례\", \"회식\", \"카페\", \"친목모임\",\r\n        \"코스요리\", \"점심식사\", \"혼밥\", \"안심식당\", \"노포\"\r\n    ];\r\n\r\n    const times = [\"전체\", ...Array.from({ length: 24 }, (_, i) => `${i + 1}시`)];\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:18080/api/restaurants-with-reviews\")\r\n            .then((response) => {\r\n                setRestaurants(response.data);\r\n            })\r\n            .catch((error) => {\r\n                setError(error.message);\r\n                console.error(\"Error fetching restaurants:\", error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setItemsPerPage(window.innerWidth <= 870 ? 4 : 8);\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n\r\n    const handleTagClick = (tag) => {\r\n        setSelectedTag(tag);\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const handlePageChange = (direction) => {\r\n        if (direction === \"next\" && currentPage < Math.ceil(filteredRestaurants.length / itemsPerPage)) {\r\n            setCurrentPage(currentPage + 1);\r\n        } else if (direction === \"prev\" && currentPage > 1) {\r\n            setCurrentPage(currentPage - 1);\r\n        }\r\n    };\r\n\r\n    const handleCardClick = (restaurantName) => {\r\n        navigate(`/find_store/${restaurantName}`);\r\n    };\r\n\r\n    const handleTimeChange = (event) => {\r\n        setSelectedTime(event.target.value);\r\n    };\r\n\r\n    const handleRegionSelection = (selection) => {\r\n        setSelectedRegion(selection);\r\n        setIsSelectCompleteActive(true);\r\n    };\r\n\r\n    const handleRegionComplete = () => {\r\n        if (!isSelectCompleteActive) return;\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setSelectedRegion(\"전체\");\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const isTimeWithinRange = (openTime, selectedTime) => {\r\n        if (!openTime || openTime === \"영업시간 정보 없음\" || selectedTime === \"전체\") {\r\n            return true;\r\n        }\r\n\r\n        if (!openTime.includes(\"~\")) {\r\n            return false;\r\n        }\r\n\r\n        const [start, end] = openTime.split(\" ~ \").map((time) => time.trim());\r\n        const selectedHour = parseInt(selectedTime.replace(\"시\", \"\"), 10);\r\n\r\n        if (!start || !end || isNaN(selectedHour)) {\r\n            return false;\r\n        }\r\n\r\n        const [startHour] = start.split(\":\").map(Number);\r\n        const [endHour] = end.split(\":\").map(Number);\r\n\r\n        if (startHour <= endHour) {\r\n            return selectedHour >= startHour && selectedHour <= endHour;\r\n        } else {\r\n            return selectedHour >= startHour || selectedHour <= endHour;\r\n        }\r\n    };\r\n\r\n    const filteredRestaurants = restaurants.filter((restaurant) => {\r\n        const matchesTag = selectedTag === \"전체\" || restaurant.tags?.includes(selectedTag);\r\n        const matchesTime = isTimeWithinRange(restaurant.openTime, selectedTime);\r\n\r\n        const matchesRegion =\r\n            selectedRegion === \"전체\" ||\r\n            (restaurant.address && restaurant.address.includes(selectedRegion)) ||\r\n            (restaurant.address &&\r\n                selectedRegion\r\n                    .split(\" \")\r\n                    .slice(0, -1)\r\n                    .every((word) => restaurant.address.includes(word)) &&\r\n                restaurant.oldAddress?.includes(selectedRegion.split(\" \").pop()));\r\n\r\n        return matchesTag && matchesTime && matchesRegion;\r\n    });\r\n\r\n    const sortedRestaurants = filteredRestaurants.sort((a, b) => {\r\n        const aAverageScore =\r\n            a.reviews?.length > 0\r\n                ? a.reviews.reduce((sum, review) => sum + review.reviewScore, 0) / a.reviews.length\r\n                : parseFloat(a.scoreNumber || 0);\r\n\r\n        const bAverageScore =\r\n            b.reviews?.length > 0\r\n                ? b.reviews.reduce((sum, review) => sum + review.reviewScore, 0) / b.reviews.length\r\n                : parseFloat(b.scoreNumber || 0);\r\n\r\n        return bAverageScore - aAverageScore;\r\n    });\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = sortedRestaurants.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <div className=\"find-store-container\">\r\n                <div className=\"header\">\r\n                    <span>\r\n                        방문시간 선택{\" \"}\r\n                        <select className=\"time-select\" value={selectedTime} onChange={handleTimeChange}>\r\n                            {times.map((time, index) => (\r\n                                <option key={index} value={time}>\r\n                                    {time}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        {\"　　　\"}\r\n                    </span>\r\n                    <span>\r\n                        현재 보고 있는 지역은{\" \"}\r\n                        <button className=\"region-select\" onClick={() => setIsRegionModalOpen(true)}>\r\n                            {selectedRegion === \"전체\" ? \"지역 선택\" : selectedRegion}\r\n                        </button>{\" \"}\r\n                        입니다.{\"　　\"}\r\n                    </span>\r\n                </div>\r\n                <div className=\"tag-container\">\r\n                    {tags.map((tag, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={`tag-button ${selectedTag === tag ? \"active\" : \"\"}`}\r\n                            onClick={() => handleTagClick(tag)}\r\n                        >\r\n                            {tag}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"left-arrow\"\r\n                    onClick={() => handlePageChange(\"prev\")}\r\n                    style={{ visibility: currentPage === 1 ? \"hidden\" : \"visible\" }}\r\n                >\r\n                    ◀\r\n                </div>\r\n                <div className=\"restaurant-list\">\r\n                    {error && <p className=\"error-message\">오류: {error}</p>}\r\n                    {currentItems.map((restaurant, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"restaurant-card\"\r\n                            onClick={() => handleCardClick(restaurant.name)}\r\n                        >\r\n                            <img\r\n                                src={restaurant.photoName === 'default.jpg'\r\n                                    ? '/images/default.jpg'\r\n                                    : `/images/restaurant/${restaurant.photoName}`}\r\n                                alt={restaurant.name}\r\n                            />\r\n                            <h2>{restaurant.name}</h2>\r\n                            <p>대표메뉴: {restaurant.category || \"정보 없음\"}</p>\r\n                            <h3>\r\n                                ⭐\r\n                                {restaurant.reviews?.length > 0 &&\r\n                                restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) > 0\r\n                                    ? (\r\n                                        restaurant.reviews.reduce((sum, review) => sum + review.reviewScore, 0) /\r\n                                        restaurant.reviews.length\r\n                                    ).toFixed(1)\r\n                                    : restaurant.scoreNumber}\r\n                            </h3>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"right-arrow\"\r\n                    onClick={() => handlePageChange(\"next\")}\r\n                    style={{\r\n                        visibility: currentPage === Math.ceil(filteredRestaurants.length / itemsPerPage) ? \"hidden\" : \"visible\",\r\n                    }}\r\n                >\r\n                    ▶\r\n                </div>\r\n\r\n                {isRegionModalOpen && (\r\n                    <div className=\"region-modal\">\r\n                        <div className=\"region-modal-content\">\r\n                            <button className=\"close-modal\" onClick={closeModal}>\r\n                                X\r\n                            </button>\r\n                            <h2 className=\"modal-title\">지역 선택</h2>\r\n                            <div className=\"region-title\">\r\n                                <span>광역시도</span>\r\n                                <span>시군구</span>\r\n                                <span>읍면동</span>\r\n                            </div>\r\n                            <div className=\"region-selection\">\r\n                                <div className=\"region-column\">\r\n                                    {Object.keys(regions).map((province) => (\r\n                                        <button\r\n                                            key={province}\r\n                                            className={`region-button ${selectedProvince === province ? \"active\" : \"\"}`}\r\n                                            onClick={() => {\r\n                                                setSelectedProvince(province);\r\n                                                setSelectedCity(null);\r\n                                                setSelectedArea(null);\r\n                                                handleRegionSelection(province);\r\n                                            }}\r\n                                        >\r\n                                            {province}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedProvince &&\r\n                                        Object.keys(regions[selectedProvince]).map((city) => (\r\n                                            <button\r\n                                                key={city}\r\n                                                className={`region-button ${selectedCity === city ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedCity(city);\r\n                                                    setSelectedArea(null);\r\n                                                    handleRegionSelection(`${selectedProvince} ${city}`);\r\n                                                }}\r\n                                            >\r\n                                                {city}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedCity &&\r\n                                        regions[selectedProvince][selectedCity].map((area) => (\r\n                                            <button\r\n                                                key={area}\r\n                                                className={`region-button ${selectedArea === area ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedArea(area);\r\n                                                    handleRegionSelection(`${selectedProvince} ${selectedCity} ${area}`);\r\n                                                }}\r\n                                            >\r\n                                                {area}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                            </div>\r\n                            <button\r\n                                className={`select-complete ${isSelectCompleteActive ? \"active\" : \"\"}`}\r\n                                onClick={handleRegionComplete}\r\n                                disabled={!isSelectCompleteActive}\r\n                            >\r\n                                선택 완료\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Find_store;"],"names":["Find_store","restaurants","setRestaurants","useState","currentPage","setCurrentPage","error","setError","selectedTag","setSelectedTag","selectedTime","setSelectedTime","selectedRegion","setSelectedRegion","isRegionModalOpen","setIsRegionModalOpen","selectedProvince","setSelectedProvince","selectedCity","setSelectedCity","selectedArea","setSelectedArea","isSelectCompleteActive","setIsSelectCompleteActive","itemsPerPage","setItemsPerPage","navigate","useNavigate","times","Array","from","length","_","i","concat","useEffect","axios","get","then","response","data","catch","message","console","handleResize","window","innerWidth","addEventListener","removeEventListener","handlePageChange","direction","Math","ceil","filteredRestaurants","handleRegionSelection","selection","filter","restaurant","_restaurant$tags","_restaurant$oldAddres","matchesTag","tags","includes","matchesTime","isTimeWithinRange","openTime","start","end","split","map","time","trim","selectedHour","parseInt","replace","isNaN","startHour","Number","endHour","matchesRegion","address","slice","every","word","oldAddress","pop","sortedRestaurants","sort","a","b","_a$reviews","_b$reviews","aAverageScore","reviews","reduce","sum","review","reviewScore","parseFloat","scoreNumber","indexOfLastItem","indexOfFirstItem","currentItems","_jsx","DiningLayout","children","_jsxs","className","value","onChange","event","target","index","onClick","tag","handleTagClick","style","visibility","_restaurant$reviews","handleCardClick","restaurantName","name","src","photoName","alt","category","toFixed","closeModal","Object","keys","regions","province","city","area","handleRegionComplete","disabled"],"sourceRoot":""}