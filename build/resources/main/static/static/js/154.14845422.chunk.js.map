{"version":3,"file":"static/js/154.14845422.chunk.js","mappings":"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","sources":["pages/Find_IdPw.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport alert from \"sweetalert2\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"../css/Find_IdPw.css\";\r\n\r\nconst Find_IdPw = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [timeLeft, setTimeLeft] = useState(() => {\r\n        const savedTime = localStorage.getItem(\"timeLeft\");\r\n        return savedTime ? parseInt(savedTime, 10) : 300;\r\n    });\r\n    const [code, setCode] = useState(\"\");\r\n    const [isDisabled, setIsDisabled] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    const query = new URLSearchParams(location.search);\r\n    const actionType = query.get(\"action\"); // \"find-id\" or \"reset-password\"\r\n    const email = query.get(\"email\"); // email passed from the previous page\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"timeLeft\", timeLeft);\r\n        if (timeLeft <= 0) {\r\n            setIsDisabled(true);\r\n            localStorage.removeItem(\"timeLeft\");\r\n        }\r\n        const timer = setInterval(() => {\r\n            setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));\r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n    }, [timeLeft]);\r\n\r\n    const formatTime = (seconds) => {\r\n        const minutes = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${minutes}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    const handleCodeChange = (e) => {\r\n        setCode(e.target.value);\r\n    };\r\n\r\n    const handleVerify = async () => {\r\n        if (!code) {\r\n            await alert.fire({\r\n                title: \"입력란 빈칸\",\r\n                text: \"인증코드를 입력하지 않았습니다.\",\r\n                icon: \"warning\",\r\n                confirmButtonText: \"확인\",\r\n            });\r\n            return;\r\n        }\r\n        if (!/^\\d{6}$/.test(code)) {\r\n            await alert.fire({\r\n                title: \"입력 오류\",\r\n                text: \"6자리 숫자 인증코드를 입력해야합니다.\",\r\n                icon: \"warning\",\r\n                confirmButtonText: \"확인\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/api/check-id`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ email, resetCode: code }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                if (actionType === \"find-id\") {\r\n                    alert.fire({\r\n                        title: \"성공\",\r\n                        text: `아이디는 ${result.email}입니다.`,\r\n                        icon: \"success\",\r\n                        confirmButtonText: \"확인\",\r\n                    }).then(() => navigate(\"/login\"));\r\n                } else if (actionType === \"reset-password\") {\r\n                    alert.fire({\r\n                        title: \"비밀번호 변경\",\r\n                        html: `\r\n                            <input type=\"password\" id=\"new-password\" class=\"alert_input\" placeholder=\"새 비밀번호\">\r\n                            <input type=\"password\" id=\"confirm-password\" class=\"alert_input\" placeholder=\"비밀번호 확인\">\r\n                        `,\r\n                        confirmButtonText: \"변경\",\r\n                        preConfirm: () => {\r\n                            const newPassword = alert.getPopup().querySelector(\"#new-password\").value;\r\n                            const confirmPassword = alert.getPopup().querySelector(\"#confirm-password\").value;\r\n                            if (!newPassword || !confirmPassword) {\r\n                                alert.showValidationMessage(\"모든 필드를 입력해주세요.\");\r\n                            }\r\n                            if (newPassword !== confirmPassword) {\r\n                                alert.showValidationMessage(\"비밀번호가 일치하지 않습니다.\");\r\n                            }\r\n                            return newPassword;\r\n                        },\r\n                    }).then(async (result) => {\r\n                        const newPassword = result.value;\r\n                        const passwordResponse = await fetch(`/api/change-pw`, {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ email, newPassword }),\r\n                        });\r\n\r\n                        if (passwordResponse.ok) {\r\n                            alert.fire({\r\n                                title: \"성공\",\r\n                                text: \"비밀번호가 성공적으로 변경되었습니다.\",\r\n                                icon: \"success\",\r\n                                confirmButtonText: \"확인\",\r\n                            }).then(() => navigate(\"/login\"));\r\n                        } else {\r\n                            await alert.fire({\r\n                                title: \"변경 실패\",\r\n                                text: \"비밀번호 변경 중 오류가 발생했습니다.\",\r\n                                icon: \"error\",\r\n                                confirmButtonText: \"확인\",\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                await alert.fire({\r\n                    title: \"실패\",\r\n                    text: \"인증코드가 유효하지 않습니다.\",\r\n                    icon: \"error\",\r\n                    confirmButtonText: \"확인\",\r\n                });\r\n            }\r\n        } catch (error) {\r\n            await alert.fire({\r\n                title: \"실패\",\r\n                text: \"서버와의 통신 중 문제가 발생했습니다.\",\r\n                icon: \"error\",\r\n                confirmButtonText: \"확인\",\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <div className=\"email-test-content\">\r\n                <h2>{actionType === \"find-id\" ? \"아이디 찾기\" : \"비밀번호 찾기\"}</h2>\r\n                <div className=\"input-section\">\r\n                    <div className=\"input-with-button\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"input-box\"\r\n                            placeholder={isFocused ? \"\" : isDisabled ? \"인증시간 종료\" : \"인증코드를 입력하세요\"}\r\n                            value={code}\r\n                            onChange={handleCodeChange}\r\n                            onFocus={() => setIsFocused(true)}\r\n                            onBlur={() => setIsFocused(false)}\r\n                            disabled={isDisabled}\r\n                        />\r\n                        <button\r\n                            className=\"action-btn\"\r\n                            onClick={isDisabled ? () => navigate(\"/find_userinfo\") : handleVerify}\r\n                        >\r\n                            {isDisabled ? \"뒤로가기\" : \"확인\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"time-set\">\r\n                    <p className=\"timer-txt\">인증시간</p>\r\n                    <p className=\"timer\">{formatTime(timeLeft)}</p>\r\n                </div>\r\n            </div>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Find_IdPw;"],"names":["Find_IdPw","navigate","useNavigate","location","useLocation","timeLeft","setTimeLeft","useState","savedTime","localStorage","getItem","parseInt","code","setCode","isDisabled","setIsDisabled","isFocused","setIsFocused","query","URLSearchParams","search","actionType","get","email","useEffect","setItem","removeItem","timer","setInterval","prev","clearInterval","_jsx","DiningLayout","children","_jsxs","className","type","placeholder","value","onChange","e","target","onFocus","onBlur","disabled","onClick","async","test","response","fetch","method","headers","body","JSON","stringify","resetCode","ok","result","json","alert","title","text","concat","icon","confirmButtonText","then","html","preConfirm","newPassword","querySelector","confirmPassword","error","seconds","minutes","Math","floor","secs","formatTime"],"sourceRoot":""}