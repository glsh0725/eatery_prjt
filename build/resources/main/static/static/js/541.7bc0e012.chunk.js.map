{"version":3,"file":"static/js/541.7bc0e012.chunk.js","mappings":"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","sources":["pages/Find_store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport regions from \"../data/regions.json\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport \"../css/Find_store.css\";\r\n\r\nconst Find_store = () => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [error, setError] = useState(\"\");\r\n    const [selectedTag, setSelectedTag] = useState(\"전체\");\r\n    const [selectedTime, setSelectedTime] = useState(\"전체\");\r\n    const [selectedRegion, setSelectedRegion] = useState(\"전체\");\r\n    const [isRegionModalOpen, setIsRegionModalOpen] = useState(false);\r\n    const [selectedProvince, setSelectedProvince] = useState(null);\r\n    const [selectedCity, setSelectedCity] = useState(null);\r\n    const [selectedArea, setSelectedArea] = useState(null);\r\n    const [isSelectCompleteActive, setIsSelectCompleteActive] = useState(false);\r\n    const itemsPerPage = 8;\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tags = [\r\n        \"전체\", \"가족모임\", \"데이트\", \"상견례\", \"회식\", \"카페\", \"친목모임\",\r\n        \"코스요리\", \"점심식사\", \"혼밥\", \"안심식당\", \"노포\"\r\n    ];\r\n\r\n    const times = [\"전체\", ...Array.from({ length: 24 }, (_, i) => `${i + 1}시`)];\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:18080/api/restaurants\")\r\n            .then((response) => {\r\n                setRestaurants(response.data);\r\n            })\r\n            .catch((error) => {\r\n                setError(error.message);\r\n                console.error(\"Error fetching restaurants:\", error);\r\n            });\r\n    }, []);\r\n\r\n    const handleTagClick = (tag) => {\r\n        setSelectedTag(tag);\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const handlePageChange = (direction) => {\r\n        if (direction === \"next\" && currentPage < Math.ceil(filteredRestaurants.length / itemsPerPage)) {\r\n            setCurrentPage(currentPage + 1);\r\n        } else if (direction === \"prev\" && currentPage > 1) {\r\n            setCurrentPage(currentPage - 1);\r\n        }\r\n    };\r\n\r\n    const handleCardClick = (restaurantId) => {\r\n        navigate(`/restaurant/${restaurantId}`);\r\n    };\r\n\r\n    const handleTimeChange = (event) => {\r\n        setSelectedTime(event.target.value);\r\n    };\r\n\r\n    const handleRegionSelection = (selection) => {\r\n        setSelectedRegion(selection);\r\n        setIsSelectCompleteActive(true);\r\n    };\r\n\r\n    const handleRegionComplete = () => {\r\n        if (!isSelectCompleteActive) return;\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setCurrentPage(1);\r\n        setIsRegionModalOpen(false);\r\n        setSelectedProvince(null);\r\n        setSelectedCity(null);\r\n        setSelectedArea(null);\r\n        setSelectedRegion(\"전체\");\r\n        setIsSelectCompleteActive(false);\r\n    };\r\n\r\n    const isTimeWithinRange = (openTime, selectedTime) => {\r\n        if (!openTime || selectedTime === \"전체\") {\r\n            return true;\r\n        }\r\n\r\n        if (!openTime.includes(\"~\")) {\r\n            return false;\r\n        }\r\n\r\n        const [start, end] = openTime.split(\" ~ \").map((time) => time.trim());\r\n        const selectedHour = parseInt(selectedTime.replace(\"시\", \"\"), 10);\r\n\r\n        if (!start || !end || isNaN(selectedHour)) {\r\n            return false;\r\n        }\r\n\r\n        const [startHour] = start.split(\":\").map(Number);\r\n        const [endHour] = end.split(\":\").map(Number);\r\n\r\n        if (startHour <= endHour) {\r\n            return selectedHour >= startHour && selectedHour <= endHour;\r\n        } else {\r\n            return selectedHour >= startHour || selectedHour <= endHour;\r\n        }\r\n    };\r\n\r\n    const filteredRestaurants = restaurants.filter((restaurant) => {\r\n        const matchesTag = selectedTag === \"전체\" || restaurant.tags?.includes(selectedTag);\r\n        const matchesTime = isTimeWithinRange(restaurant.openTime, selectedTime);\r\n\r\n        const matchesRegion =\r\n            selectedRegion === \"전체\" ||\r\n            (restaurant.address && restaurant.address.includes(selectedRegion)) ||\r\n            (restaurant.oldAddress && restaurant.oldAddress.includes(selectedRegion)) ||\r\n            (restaurant.oldAddress && restaurant.oldAddress.includes(selectedRegion.split(\" \").pop())) ||\r\n            selectedRegion.split(\" \").every((word) =>\r\n                (restaurant.address && restaurant.address.includes(word)) ||\r\n                (restaurant.oldAddress && restaurant.oldAddress.includes(word))\r\n            );\r\n\r\n        return matchesTag && matchesTime && matchesRegion;\r\n    });\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = filteredRestaurants.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <div className=\"find-store-container\">\r\n                <div className=\"header\">\r\n                    <span>\r\n                        방문시간 선택{\" \"}\r\n                        <select className=\"time-select\" value={selectedTime} onChange={handleTimeChange}>\r\n                            {times.map((time, index) => (\r\n                                <option key={index} value={time}>\r\n                                    {time}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        {\"　　　\"}\r\n                    </span>\r\n                    <span>\r\n                        현재 보고 있는 지역은{\" \"}\r\n                        <button className=\"region-select\" onClick={() => setIsRegionModalOpen(true)}>\r\n                            {selectedRegion === \"전체\" ? \"지역 선택\" : selectedRegion}\r\n                        </button>{\" \"}\r\n                        입니다.{\"　　\"}\r\n                    </span>\r\n                </div>\r\n                <div className=\"tag-container\">\r\n                    {tags.map((tag, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={`tag-button ${selectedTag === tag ? \"active\" : \"\"}`}\r\n                            onClick={() => handleTagClick(tag)}\r\n                        >\r\n                            {tag}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"left-arrow\"\r\n                    onClick={() => handlePageChange(\"prev\")}\r\n                    style={{ visibility: currentPage === 1 ? \"hidden\" : \"visible\" }}\r\n                >\r\n                    ◀\r\n                </div>\r\n                <div className=\"restaurant-list\">\r\n                    {error && <p className=\"error-message\">오류: {error}</p>}\r\n                    {currentItems.map((restaurant, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"restaurant-card\"\r\n                            onClick={() => handleCardClick(restaurant.id)} // 추가\r\n                        >\r\n                            <img\r\n                                src={`/images/restaurant/${restaurant.photoName || \"default.jpg\"}`}\r\n                                alt={restaurant.name}\r\n                            />\r\n                            <h2>{restaurant.name}</h2>\r\n                            <p>대표메뉴: {restaurant.category || \"정보 없음\"}</p>\r\n                            <h3>⭐ </h3>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"right-arrow\"\r\n                    onClick={() => handlePageChange(\"next\")}\r\n                    style={{\r\n                        visibility: currentPage === Math.ceil(filteredRestaurants.length / itemsPerPage) ? \"hidden\" : \"visible\",\r\n                    }}\r\n                >\r\n                    ▶\r\n                </div>\r\n\r\n                {isRegionModalOpen && (\r\n                    <div className=\"region-modal\">\r\n                        <div className=\"region-modal-content\">\r\n                            <button className=\"close-modal\" onClick={closeModal}>\r\n                                X\r\n                            </button>\r\n                            <h2 className=\"modal-title\">지역 선택</h2>\r\n                            <div className=\"region-title\">\r\n                                <span>광역시도</span>\r\n                                <span>시군구</span>\r\n                                <span>읍면동</span>\r\n                            </div>\r\n                            <div className=\"region-selection\">\r\n                                <div className=\"region-column\">\r\n                                    {Object.keys(regions).map((province) => (\r\n                                        <button\r\n                                            key={province}\r\n                                            className={`region-button ${selectedProvince === province ? \"active\" : \"\"}`}\r\n                                            onClick={() => {\r\n                                                setSelectedProvince(province);\r\n                                                setSelectedCity(null);\r\n                                                setSelectedArea(null);\r\n                                                handleRegionSelection(province);\r\n                                            }}\r\n                                        >\r\n                                            {province}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedProvince &&\r\n                                        Object.keys(regions[selectedProvince]).map((city) => (\r\n                                            <button\r\n                                                key={city}\r\n                                                className={`region-button ${selectedCity === city ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedCity(city);\r\n                                                    setSelectedArea(null);\r\n                                                    handleRegionSelection(`${selectedProvince} ${city}`);\r\n                                                }}\r\n                                            >\r\n                                                {city}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                                <div className=\"region-column\">\r\n                                    {selectedCity &&\r\n                                        regions[selectedProvince][selectedCity].map((area) => (\r\n                                            <button\r\n                                                key={area}\r\n                                                className={`region-button ${selectedArea === area ? \"active\" : \"\"}`}\r\n                                                onClick={() => {\r\n                                                    setSelectedArea(area);\r\n                                                    handleRegionSelection(`${selectedProvince} ${selectedCity} ${area}`);\r\n                                                }}\r\n                                            >\r\n                                                {area}\r\n                                            </button>\r\n                                        ))}\r\n                                </div>\r\n                            </div>\r\n                            <button\r\n                                className={`select-complete ${isSelectCompleteActive ? \"active\" : \"\"}`}\r\n                                onClick={handleRegionComplete}\r\n                                disabled={!isSelectCompleteActive}\r\n                            >\r\n                                선택 완료\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Find_store;"],"names":["Find_store","restaurants","setRestaurants","useState","currentPage","setCurrentPage","error","setError","selectedTag","setSelectedTag","selectedTime","setSelectedTime","selectedRegion","setSelectedRegion","isRegionModalOpen","setIsRegionModalOpen","selectedProvince","setSelectedProvince","selectedCity","setSelectedCity","selectedArea","setSelectedArea","isSelectCompleteActive","setIsSelectCompleteActive","navigate","useNavigate","times","Array","from","length","_","i","concat","useEffect","axios","get","then","response","data","catch","message","console","handlePageChange","direction","Math","ceil","filteredRestaurants","handleRegionSelection","selection","filter","restaurant","_restaurant$tags","matchesTag","tags","includes","matchesTime","isTimeWithinRange","openTime","start","end","split","map","time","trim","selectedHour","parseInt","replace","isNaN","startHour","Number","endHour","matchesRegion","address","oldAddress","pop","every","word","indexOfLastItem","indexOfFirstItem","currentItems","slice","_jsx","DiningLayout","children","_jsxs","className","value","onChange","event","target","index","onClick","tag","handleTagClick","style","visibility","handleCardClick","restaurantId","id","src","photoName","alt","name","category","closeModal","Object","keys","regions","province","city","area","handleRegionComplete","disabled"],"sourceRoot":""}