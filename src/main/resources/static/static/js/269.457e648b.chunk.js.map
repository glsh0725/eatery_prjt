{"version":3,"file":"static/js/269.457e648b.chunk.js","mappings":"qMASA,MA0FA,EA1FcA,KACV,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAC/BG,GAAWC,EAAAA,EAAAA,MA6CjB,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACTC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,aAAaC,SA7ChBC,UACjBC,EAAEC,iBACF,IACI,MAKMC,SALiBC,EAAAA,EAAMC,KAAK,mCAAoC,CAClElB,OAAQA,EACRG,OAAQA,KAGWgB,QAAuB,cAC9C,GAAIH,EAAO,CCtBGA,KACxBI,aAAaC,QAAQ,YAAaL,EAAM,EDwB1BM,CADmBN,EAAMO,WAAW,WAAaP,EAAMQ,MAAM,KAAK,GAAKR,GAEvES,OAAOC,cAAc,IAAIC,MAAM,gBAEzBC,IAAAA,KAAW,CACbC,KAAM,UACNC,MAAO,mCACPC,KAAM,gFAGV1B,EAAS,IACb,CACJ,CAAE,MAAO2B,GACDA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,aAEvBN,IAAAA,KAAW,CACbC,KAAM,QACNC,MAAO,kCACPC,KAAM,qHAIJH,IAAAA,KAAW,CACbC,KAAM,QACNC,MAAO,kCACPC,KAAM,0GAGdI,QAAQC,MAAM,+CAAaJ,EAC/B,GAKwDvB,SAAA,EAChDF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,SACII,UAAU,cACV0B,KAAK,OACLC,GAAG,KACHC,MAAOvC,EACPwC,SAAW1B,GAAMb,EAAUa,EAAE2B,OAAOF,OACpCG,YAAY,wBAEhBnC,EAAAA,EAAAA,KAAA,SACII,UAAU,cACV0B,KAAK,WACLE,MAAOpC,EACPqC,SAAW1B,GAAMV,EAAUU,EAAE2B,OAAOF,OACpCG,YAAY,8BAEhBhC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBF,EAAAA,EAAAA,KAAA,SAAO8B,KAAK,WAAWC,GAAG,qBAAqB,uCAEnD/B,EAAAA,EAAAA,KAAA,UAAQI,UAAU,eAAcF,SAAC,wBACjCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,QAAOF,UAClBF,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACC,GAAG,WAAUnC,SAAC,gCAExBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,QAAOF,UAClBF,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACC,GAAG,iBAAgBnC,SAAC,+DAE9BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASF,SAAA,EACpBF,EAAAA,EAAAA,KAAA,UAAQ8B,KAAK,SAAS1B,UAAU,gBAAeF,SAAC,oEAGhDF,EAAAA,EAAAA,KAAA,UAAQ8B,KAAK,SAAS1B,UAAU,gBAAeF,SAAC,mEAK7C,C","sources":["pages/Login.js","utils/auth.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { saveToken } from \"../utils/auth\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DiningLayout from \"../layouts/DiningLayout\";\r\nimport \"../css/Login.css\";\r\nimport alert from 'sweetalert2';\r\n\r\nconst Login = () => {\r\n    const [mem_id, setMem_id] = useState(\"\");\r\n    const [mem_pw, setMem_pw] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post(\"http://localhost:18080/api/login\", {\r\n                mem_id: mem_id,\r\n                mem_pw: mem_pw,\r\n            });\r\n\r\n            const token = response.headers[\"authorization\"];\r\n            if (token) {\r\n                // Bearer 제거\r\n                const cleanToken = token.startsWith(\"Bearer \") ? token.split(\" \")[1] : token;\r\n                saveToken(cleanToken); // 순수 토큰 저장\r\n                window.dispatchEvent(new Event(\"login\")); // 로그인 이벤트 트리거\r\n\r\n                await alert.fire({\r\n                    icon: 'success',\r\n                    title: '로그인 성공!',\r\n                    text: '다이닝픽 회원님 환영합니다.',\r\n                });\r\n\r\n                navigate(\"/\"); // 로그인 후 홈으로 리다이렉트\r\n            }\r\n        } catch (err) {\r\n            if (err.response && err.response.status === 401) {\r\n                // 로그인 실패 시 알림\r\n                await alert.fire({\r\n                    icon: 'error',\r\n                    title: '로그인 실패',\r\n                    text: '아이디 또는 비밀번호가 잘못되었습니다.',\r\n                });\r\n            } else {\r\n                // 서버 연결 오류 시 알림\r\n                await alert.fire({\r\n                    icon: 'error',\r\n                    title: '로그인 실패',\r\n                    text: '서버와의 통신 중 오류가 발생했습니다.',\r\n                });\r\n            }\r\n            console.error(\"백엔드 연결 에러\", err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <DiningLayout>\r\n            <form className=\"login-form\" onSubmit={handleSubmit}>\r\n                <h1>로그인</h1>\r\n                <input\r\n                    className=\"input-field\"\r\n                    type=\"text\"\r\n                    id=\"id\"\r\n                    value={mem_id}\r\n                    onChange={(e) => setMem_id(e.target.value)}\r\n                    placeholder=\"아이디\"\r\n                />\r\n                <input\r\n                    className=\"input-field\"\r\n                    type=\"password\"\r\n                    value={mem_pw}\r\n                    onChange={(e) => setMem_pw(e.target.value)}\r\n                    placeholder=\"비밀번호\"\r\n                />\r\n                <div className=\"saveIdlabel\">\r\n                    <input type=\"checkbox\" id=\"confirm-password\" /> 아이디 저장\r\n                </div>\r\n                <button className=\"login-button\">로그인</button>\r\n                <div className=\"label\">\r\n                    <Link to=\"/Sign_up\">회원가입</Link>\r\n                </div>\r\n                <div className=\"label\">\r\n                    <Link to=\"/find_userinfo\">아이디/비밀번호찾기</Link>\r\n                </div>\r\n                <div className=\"display\">\r\n                    <button type=\"button\" className=\"signup-button\">\r\n                        카카오 아이디로 로그인\r\n                    </button>\r\n                    <button type=\"button\" className=\"signup-button\">\r\n                        구글계정으로 로그인\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </DiningLayout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","// src/utils/auth.js\r\nexport const saveToken = (token) => {\r\n  localStorage.setItem(\"authToken\", token);\r\n};\r\n\r\nexport const getToken = () => {\r\n  return localStorage.getItem(\"authToken\");\r\n};\r\n\r\nexport const removeToken = () => {\r\n  localStorage.removeItem(\"authToken\");\r\n};\r\n\r\nexport const isLoggedIn = () => {\r\n  return !!getToken();\r\n};\r\n"],"names":["Login","mem_id","setMem_id","useState","mem_pw","setMem_pw","navigate","useNavigate","_jsx","DiningLayout","children","_jsxs","className","onSubmit","async","e","preventDefault","token","axios","post","headers","localStorage","setItem","saveToken","startsWith","split","window","dispatchEvent","Event","alert","icon","title","text","err","response","status","console","error","type","id","value","onChange","target","placeholder","Link","to"],"sourceRoot":""}