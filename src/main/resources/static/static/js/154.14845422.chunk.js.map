{"version":3,"file":"static/js/154.14845422.chunk.js","mappings":"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","sources":["pages/Find_IdPw.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport alert from \"sweetalert2\";\nimport DiningLayout from \"../layouts/DiningLayout\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"../css/Find_IdPw.css\";\n\nconst Find_IdPw = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const [timeLeft, setTimeLeft] = useState(() => {\n        const savedTime = localStorage.getItem(\"timeLeft\");\n        return savedTime ? parseInt(savedTime, 10) : 300;\n    });\n    const [code, setCode] = useState(\"\");\n    const [isDisabled, setIsDisabled] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    const query = new URLSearchParams(location.search);\n    const actionType = query.get(\"action\"); // \"find-id\" or \"reset-password\"\n    const email = query.get(\"email\"); // email passed from the previous page\n\n    useEffect(() => {\n        localStorage.setItem(\"timeLeft\", timeLeft);\n        if (timeLeft <= 0) {\n            setIsDisabled(true);\n            localStorage.removeItem(\"timeLeft\");\n        }\n        const timer = setInterval(() => {\n            setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [timeLeft]);\n\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${minutes}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n    };\n\n    const handleCodeChange = (e) => {\n        setCode(e.target.value);\n    };\n\n    const handleVerify = async () => {\n        if (!code) {\n            await alert.fire({\n                title: \"입력란 빈칸\",\n                text: \"인증코드를 입력하지 않았습니다.\",\n                icon: \"warning\",\n                confirmButtonText: \"확인\",\n            });\n            return;\n        }\n        if (!/^\\d{6}$/.test(code)) {\n            await alert.fire({\n                title: \"입력 오류\",\n                text: \"6자리 숫자 인증코드를 입력해야합니다.\",\n                icon: \"warning\",\n                confirmButtonText: \"확인\",\n            });\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/check-id`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ email, resetCode: code }),\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                if (actionType === \"find-id\") {\n                    alert.fire({\n                        title: \"성공\",\n                        text: `아이디는 ${result.email}입니다.`,\n                        icon: \"success\",\n                        confirmButtonText: \"확인\",\n                    }).then(() => navigate(\"/login\"));\n                } else if (actionType === \"reset-password\") {\n                    alert.fire({\n                        title: \"비밀번호 변경\",\n                        html: `\n                            <input type=\"password\" id=\"new-password\" class=\"alert_input\" placeholder=\"새 비밀번호\">\n                            <input type=\"password\" id=\"confirm-password\" class=\"alert_input\" placeholder=\"비밀번호 확인\">\n                        `,\n                        confirmButtonText: \"변경\",\n                        preConfirm: () => {\n                            const newPassword = alert.getPopup().querySelector(\"#new-password\").value;\n                            const confirmPassword = alert.getPopup().querySelector(\"#confirm-password\").value;\n                            if (!newPassword || !confirmPassword) {\n                                alert.showValidationMessage(\"모든 필드를 입력해주세요.\");\n                            }\n                            if (newPassword !== confirmPassword) {\n                                alert.showValidationMessage(\"비밀번호가 일치하지 않습니다.\");\n                            }\n                            return newPassword;\n                        },\n                    }).then(async (result) => {\n                        const newPassword = result.value;\n                        const passwordResponse = await fetch(`/api/change-pw`, {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({ email, newPassword }),\n                        });\n\n                        if (passwordResponse.ok) {\n                            alert.fire({\n                                title: \"성공\",\n                                text: \"비밀번호가 성공적으로 변경되었습니다.\",\n                                icon: \"success\",\n                                confirmButtonText: \"확인\",\n                            }).then(() => navigate(\"/login\"));\n                        } else {\n                            await alert.fire({\n                                title: \"변경 실패\",\n                                text: \"비밀번호 변경 중 오류가 발생했습니다.\",\n                                icon: \"error\",\n                                confirmButtonText: \"확인\",\n                            });\n                        }\n                    });\n                }\n            } else {\n                await alert.fire({\n                    title: \"실패\",\n                    text: \"인증코드가 유효하지 않습니다.\",\n                    icon: \"error\",\n                    confirmButtonText: \"확인\",\n                });\n            }\n        } catch (error) {\n            await alert.fire({\n                title: \"실패\",\n                text: \"서버와의 통신 중 문제가 발생했습니다.\",\n                icon: \"error\",\n                confirmButtonText: \"확인\",\n            });\n        }\n    };\n\n    return (\n        <DiningLayout>\n            <div className=\"email-test-content\">\n                <h2>{actionType === \"find-id\" ? \"아이디 찾기\" : \"비밀번호 찾기\"}</h2>\n                <div className=\"input-section\">\n                    <div className=\"input-with-button\">\n                        <input\n                            type=\"text\"\n                            className=\"input-box\"\n                            placeholder={isFocused ? \"\" : isDisabled ? \"인증시간 종료\" : \"인증코드를 입력하세요\"}\n                            value={code}\n                            onChange={handleCodeChange}\n                            onFocus={() => setIsFocused(true)}\n                            onBlur={() => setIsFocused(false)}\n                            disabled={isDisabled}\n                        />\n                        <button\n                            className=\"action-btn\"\n                            onClick={isDisabled ? () => navigate(\"/find_userinfo\") : handleVerify}\n                        >\n                            {isDisabled ? \"뒤로가기\" : \"확인\"}\n                        </button>\n                    </div>\n                </div>\n                <div className=\"time-set\">\n                    <p className=\"timer-txt\">인증시간</p>\n                    <p className=\"timer\">{formatTime(timeLeft)}</p>\n                </div>\n            </div>\n        </DiningLayout>\n    );\n};\n\nexport default Find_IdPw;"],"names":["Find_IdPw","navigate","useNavigate","location","useLocation","timeLeft","setTimeLeft","useState","savedTime","localStorage","getItem","parseInt","code","setCode","isDisabled","setIsDisabled","isFocused","setIsFocused","query","URLSearchParams","search","actionType","get","email","useEffect","setItem","removeItem","timer","setInterval","prev","clearInterval","_jsx","DiningLayout","children","_jsxs","className","type","placeholder","value","onChange","e","target","onFocus","onBlur","disabled","onClick","async","test","response","fetch","method","headers","body","JSON","stringify","resetCode","ok","result","json","alert","title","text","concat","icon","confirmButtonText","then","html","preConfirm","newPassword","querySelector","confirmPassword","error","seconds","minutes","Math","floor","secs","formatTime"],"sourceRoot":""}